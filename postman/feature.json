{
	"info": {
		"_postman_id": "f7e423cc-4258-4f65-b707-9b301b6aa611",
		"name": "Subscriptions",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "25514925"
	},
	"item": [
		{
			"name": "pre-tests",
			"item": [
				{
					"name": "Добавление нового пользователя 1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = JSON.parse(pm.request.body.raw);\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Пользователь должен содержать поля: id, name, email\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('name');\r",
									"pm.expect(target).to.have.property('email');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.id).to.not.be.null;\r",
									"    pm.expect(source.name).equal(target.name, 'Имя пользователя должно соответствовать отправленному в запросе');\r",
									"    pm.expect(source.email).equal(target.email, 'Почта пользователя должна соответствовать отправленной в запросе');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"name\":\"First User\",\"email\":\"firstemail@mail.ru\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавление нового пользователя 2",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = JSON.parse(pm.request.body.raw);\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Пользователь должен содержать поля: id, name, email\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('name');\r",
									"pm.expect(target).to.have.property('email');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.id).to.not.be.null;\r",
									"    pm.expect(source.name).equal(target.name, 'Имя пользователя должно соответствовать отправленному в запросе');\r",
									"    pm.expect(source.email).equal(target.email, 'Почта пользователя должна соответствовать отправленной в запросе');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"name\":\"Second User\",\"email\":\"secondemail@mail.ru\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавление нового пользователя 3",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = JSON.parse(pm.request.body.raw);\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Пользователь должен содержать поля: id, name, email\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('name');\r",
									"pm.expect(target).to.have.property('email');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.id).to.not.be.null;\r",
									"    pm.expect(source.name).equal(target.name, 'Имя пользователя должно соответствовать отправленному в запросе');\r",
									"    pm.expect(source.email).equal(target.email, 'Почта пользователя должна соответствовать отправленной в запросе');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"name\":\"Third User\",\"email\":\"thirdemail@mail.ru\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавление новой категории",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = JSON.parse(pm.request.body.raw);\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Категория должна содержать поля: id, name\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('name');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.id).to.not.be.null;\r",
									"    pm.expect(source.name).equal(target.name, 'Название категории должно совпадать с отправленным');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"name\":\"One and only category\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/categories",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"categories"
							]
						},
						"description": "Обратите внимание: имя категории должно быть уникальным"
					},
					"response": []
				},
				{
					"name": "Добавление нового события 1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);  \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = JSON.parse(pm.request.body.raw);\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Событие должно содержать поля: id, title, annotation, category, paid, eventDate, initiator, description, participantLimit, state, createdOn, location, requestModeration\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('title');\r",
									"pm.expect(target).to.have.property('annotation');\r",
									"pm.expect(target).to.have.property('category');\r",
									"pm.expect(target).to.have.property('paid');\r",
									"pm.expect(target).to.have.property('eventDate');\r",
									"pm.expect(target).to.have.property('initiator');\r",
									"pm.expect(target).to.have.property('description');\r",
									"pm.expect(target).to.have.property('participantLimit');\r",
									"pm.expect(target).to.have.property('state');\r",
									"pm.expect(target).to.have.property('createdOn');\r",
									"pm.expect(target).to.have.property('location');\r",
									"pm.expect(target).to.have.property('requestModeration');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.id).to.not.be.null;\r",
									"    pm.expect(target.title).equal(source.title, 'Название события должно соответствовать названию события в запросе');\r",
									"    pm.expect(target.annotation).equal(source.annotation, 'Аннотация события должна соответствовать аннотации события в запросе');\r",
									"    pm.expect(target.paid.toString()).equal(source.paid.toString(), 'Стоимость события должна соответствовать стоимости события в запросе');\r",
									"    pm.expect(target.eventDate).equal(source.eventDate, 'Дата проведения события должна соответствовать дате проведения события в запросе');\r",
									"    pm.expect(target.description).equal(source.description, 'Описание события должно соответствовать описание события в запросе');\r",
									"    pm.expect(target.participantLimit.toString()).equal(source.participantLimit.toString(), 'Лимит участников события должно соответствовать лимиту участников события в запросе');\r",
									"    pm.expect(target.location.lat.toString()).equal(source.location.lat.toString(), 'Широта локации проведения события должна соответствовать широте локации проведения события в запросе');\r",
									"    pm.expect(target.location.lon.toString()).equal(source.location.lon.toString(), 'Долгота локации проведения события должна соответствовать долготе локации проведения события в запросе');\r",
									"    pm.expect(target.requestModeration.toString()).equal(source.requestModeration.toString(), 'Необходимость модерации события должна соответствовать необходимости модерации события в запросе');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"annotation\":\"There is some annotation for this event\",\"category\":\"1\",\"description\":\"There is some description for this event, too\",\"eventDate\":\"2024-02-06 11:30:00\",\"location\":{\"lon\":\"11.03278\",\"lat\":\"-5.2367\"},\"paid\":\"true\",\"participantLimit\":\"0\",\"requestModeration\":\"false\",\"title\":\"First wonderful event\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/:userId/events",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"events"
							],
							"variable": [
								{
									"key": "userId",
									"value": "2",
									"description": "(Required) id текущего пользователя"
								}
							]
						},
						"description": "Обратите внимание: дата и время на которые намечено событие не может быть раньше, чем через два часа от текущего момента"
					},
					"response": []
				},
				{
					"name": "Добавление нового события 1 Copy",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);  \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = JSON.parse(pm.request.body.raw);\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Событие должно содержать поля: id, title, annotation, category, paid, eventDate, initiator, description, participantLimit, state, createdOn, location, requestModeration\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('title');\r",
									"pm.expect(target).to.have.property('annotation');\r",
									"pm.expect(target).to.have.property('category');\r",
									"pm.expect(target).to.have.property('paid');\r",
									"pm.expect(target).to.have.property('eventDate');\r",
									"pm.expect(target).to.have.property('initiator');\r",
									"pm.expect(target).to.have.property('description');\r",
									"pm.expect(target).to.have.property('participantLimit');\r",
									"pm.expect(target).to.have.property('state');\r",
									"pm.expect(target).to.have.property('createdOn');\r",
									"pm.expect(target).to.have.property('location');\r",
									"pm.expect(target).to.have.property('requestModeration');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.id).to.not.be.null;\r",
									"    pm.expect(target.title).equal(source.title, 'Название события должно соответствовать названию события в запросе');\r",
									"    pm.expect(target.annotation).equal(source.annotation, 'Аннотация события должна соответствовать аннотации события в запросе');\r",
									"    pm.expect(target.paid.toString()).equal(source.paid.toString(), 'Стоимость события должна соответствовать стоимости события в запросе');\r",
									"    pm.expect(target.eventDate).equal(source.eventDate, 'Дата проведения события должна соответствовать дате проведения события в запросе');\r",
									"    pm.expect(target.description).equal(source.description, 'Описание события должно соответствовать описание события в запросе');\r",
									"    pm.expect(target.participantLimit.toString()).equal(source.participantLimit.toString(), 'Лимит участников события должно соответствовать лимиту участников события в запросе');\r",
									"    pm.expect(target.location.lat.toString()).equal(source.location.lat.toString(), 'Широта локации проведения события должна соответствовать широте локации проведения события в запросе');\r",
									"    pm.expect(target.location.lon.toString()).equal(source.location.lon.toString(), 'Долгота локации проведения события должна соответствовать долготе локации проведения события в запросе');\r",
									"    pm.expect(target.requestModeration.toString()).equal(source.requestModeration.toString(), 'Необходимость модерации события должна соответствовать необходимости модерации события в запросе');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"annotation\":\"There is some annotation for this event\",\"category\":\"1\",\"description\":\"There is some description for this event, too\",\"eventDate\":\"2024-02-11 11:30:00\",\"location\":{\"lon\":\"9.03278\",\"lat\":\"2.367\"},\"paid\":\"true\",\"participantLimit\":\"1\",\"requestModeration\":\"false\",\"title\":\"Second wonderful event\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/:userId/events",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"events"
							],
							"variable": [
								{
									"key": "userId",
									"value": "3",
									"description": "(Required) id текущего пользователя"
								}
							]
						},
						"description": "Обратите внимание: дата и время на которые намечено событие не может быть раньше, чем через два часа от текущего момента"
					},
					"response": []
				},
				{
					"name": "Получение событий",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.be.ok;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/events",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"events"
							]
						},
						"description": "Обратите внимание: \n- это публичный эндпоинт, соответственно в выдаче должны быть только опубликованные события\n- текстовый поиск (по аннотации и подробному описанию) должен быть без учета регистра букв\n- если в запросе не указан диапазон дат [rangeStart-rangeEnd], то нужно выгружать события, которые произойдут позже текущей даты и времени\n- информация о каждом событии должна включать в себя количество просмотров и количество уже одобренных заявок на участие\n- информацию о том, что по этому эндпоинту был осуществлен и обработан запрос, нужно сохранить в сервисе статистики"
					},
					"response": []
				}
			]
		},
		{
			"name": "successful tests",
			"item": [
				{
					"name": "Добавление новой подписки",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const body = pm.response.json();\r",
									"\r",
									"pm.test(\"Ответ должен содержать код ответа 201 и тело ответа\", function() {\r",
									"  pm.response.to.have.status(201);\r",
									"  pm.response.to.be.withBody;\r",
									"  pm.response.to.be.json;  \r",
									"})\r",
									"\r",
									"pm.test(\"Список подписчиков должен быть пуст\", function() {\r",
									"    pm.expect(body.subscribers).to.be.length(0);\r",
									"})\r",
									"\r",
									"pm.test(\"Список подписок должен содержать 1 запись с id юзера = 2\", function() {\r",
									"    pm.expect(body.subscriptions).to.be.length(1);\r",
									"    pm.expect(body.subscriptions[0].id).equal(2);\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/:userId/subscriptions/:subId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"subscriptions",
								":subId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "1"
								},
								{
									"key": "subId",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение списка подписок",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const body = pm.response.json();\r",
									"\r",
									"pm.test(\"Ответ должен содержать код ответа 200 и тело ответа\", function() {\r",
									"  pm.response.to.be.ok;\r",
									"  pm.response.to.be.withBody;\r",
									"  pm.response.to.be.json;  \r",
									"})\r",
									"\r",
									"pm.test(\"Список подписок должен содержать 1 запись\", function(){\r",
									"    pm.expect(body).to.be.length(1);\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/:userId/subscriptions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"subscriptions"
							],
							"variable": [
								{
									"key": "userId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение пустого списка подписчиков",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const body = pm.response.json();\r",
									"\r",
									"pm.test(\"Ответ должен содержать код ответа 200 и тело ответа\", function() {\r",
									"  pm.response.to.be.ok;\r",
									"  pm.response.to.be.withBody;\r",
									"  pm.response.to.be.json;  \r",
									"})\r",
									"\r",
									"pm.test(\"Список подписок не должен содержать запись\", function(){\r",
									"    pm.expect(body).to.be.length(0);\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/:userId/subscriptions/subscribers",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"subscriptions",
								"subscribers"
							],
							"variable": [
								{
									"key": "userId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавление новой подписки",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const body = pm.response.json();\r",
									"\r",
									"pm.test(\"Ответ должен содержать код ответа 201 и тело ответа\", function() {\r",
									"  pm.response.to.have.status(201);\r",
									"  pm.response.to.be.withBody;\r",
									"  pm.response.to.be.json;  \r",
									"})\r",
									"\r",
									"pm.test(\"Список подписчиков должен быть пуст\", function() {\r",
									"    pm.expect(body.subscribers).to.be.length(0);\r",
									"})\r",
									"\r",
									"pm.test(\"Список подписок должен содержать 2 записи с id юзеров = 2 и 3\", function() {\r",
									"    pm.expect(body.subscriptions).to.be.length(2);\r",
									"    pm.expect(body.subscriptions[0].id).equal(2);\r",
									"    pm.expect(body.subscriptions[1].id).equal(3);\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/:userId/subscriptions/:subId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"subscriptions",
								":subId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "1"
								},
								{
									"key": "subId",
									"value": "3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение списка событий  без параметров",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код ответа 200 и тело ответа\", function() {\r",
									"  pm.response.to.be.ok;\r",
									"  pm.response.to.be.withBody;\r",
									"  pm.response.to.be.json;  \r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/:userId/subscriptions/:subId/events",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"subscriptions",
								":subId",
								"events"
							],
							"variable": [
								{
									"key": "userId",
									"value": "1"
								},
								{
									"key": "subId",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавление взаимной подписки",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const body = pm.response.json();\r",
									"\r",
									"pm.test(\"Ответ должен содержать код ответа 201 и тело ответа\", function() {\r",
									"  pm.response.to.have.status(201);\r",
									"  pm.response.to.be.withBody;\r",
									"  pm.response.to.be.json;  \r",
									"})\r",
									"\r",
									"pm.test(\"Список подписчиков содержать 1 запись с id юзера = 1\", function() {\r",
									"    pm.expect(body.subscribers).to.be.length(1);\r",
									"    pm.expect(body.subscribers[0].id).equal(1);\r",
									"})\r",
									"\r",
									"pm.test(\"Список подписок должен содержать 1 запись с id юзера = 1\", function() {\r",
									"    pm.expect(body.subscriptions).to.be.length(1);\r",
									"    pm.expect(body.subscriptions[0].id).equal(1);\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/:userId/subscriptions/:subId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"subscriptions",
								":subId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "2"
								},
								{
									"key": "subId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение списка подписчиков",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const body = pm.response.json();\r",
									"\r",
									"pm.test(\"Ответ должен содержать код ответа 200 и тело ответа\", function() {\r",
									"  pm.response.to.be.ok;\r",
									"  pm.response.to.be.withBody;\r",
									"  pm.response.to.be.json;  \r",
									"});\r",
									"\r",
									"pm.test(\"Список подписок должен содержать 1 запись\", function(){\r",
									"    pm.expect(body).to.be.length(1);\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/:userId/subscriptions/subscribers",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"subscriptions",
								"subscribers"
							],
							"variable": [
								{
									"key": "userId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавление нового события 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);  \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = JSON.parse(pm.request.body.raw);\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Событие должно содержать поля: id, title, annotation, category, paid, eventDate, initiator, description, participantLimit, state, createdOn, location, requestModeration\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('title');\r",
									"pm.expect(target).to.have.property('annotation');\r",
									"pm.expect(target).to.have.property('category');\r",
									"pm.expect(target).to.have.property('paid');\r",
									"pm.expect(target).to.have.property('eventDate');\r",
									"pm.expect(target).to.have.property('initiator');\r",
									"pm.expect(target).to.have.property('description');\r",
									"pm.expect(target).to.have.property('participantLimit');\r",
									"pm.expect(target).to.have.property('state');\r",
									"pm.expect(target).to.have.property('createdOn');\r",
									"pm.expect(target).to.have.property('location');\r",
									"pm.expect(target).to.have.property('requestModeration');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"annotation\":\"qwertyuiopasdfghjklzxcvbnmqwertyuiop\",\"category\":\"1\",\"description\":\"mnbvcxzlkjhgfdsapoiuytrewqasdfghjklzxcvbnm\",\"eventDate\":\"2024-02-05 18:30:00\",\"location\":{\"lon\":\"-17.256743\",\"lat\":\"6.573\"},\"paid\":\"false\",\"participantLimit\":\"2\",\"requestModeration\":\"true\",\"title\":\"qpwoeiruty\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/:userId/events",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"events"
							],
							"variable": [
								{
									"key": "userId",
									"value": "3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение событий с возможностью фильтрации",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.be.ok;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/events?paid=true&rangeStart=2022-01-06%2013%3A30%3A38&rangeEnd=2097-09-06%2013%3A30%3A38&onlyAvailable=false&sort=EVENT_DATE&from=0&size=1000",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"events"
							],
							"query": [
								{
									"key": "paid",
									"value": "true",
									"description": "поиск только платных/бесплатных событий"
								},
								{
									"key": "rangeStart",
									"value": "2022-01-06%2013%3A30%3A38",
									"description": "дата и время не раньше которых должно произойти событие"
								},
								{
									"key": "rangeEnd",
									"value": "2097-09-06%2013%3A30%3A38",
									"description": "дата и время не позже которых должно произойти событие"
								},
								{
									"key": "onlyAvailable",
									"value": "false",
									"description": "только события у которых не исчерпан лимит запросов на участие"
								},
								{
									"key": "sort",
									"value": "EVENT_DATE",
									"description": "Вариант сортировки: по дате события или по количеству просмотров"
								},
								{
									"key": "from",
									"value": "0",
									"description": "количество событий, которые нужно пропустить для формирования текущего набора"
								},
								{
									"key": "size",
									"value": "1000",
									"description": "количество событий в наборе"
								}
							]
						},
						"description": "Обратите внимание: \n- это публичный эндпоинт, соответственно в выдаче должны быть только опубликованные события\n- текстовый поиск (по аннотации и подробному описанию) должен быть без учета регистра букв\n- если в запросе не указан диапазон дат [rangeStart-rangeEnd], то нужно выгружать события, которые произойдут позже текущей даты и времени\n- информация о каждом событии должна включать в себя количество просмотров и количество уже одобренных заявок на участие\n- информацию о том, что по этому эндпоинту был осуществлен и обработан запрос, нужно сохранить в сервисе статистики"
					},
					"response": []
				},
				{
					"name": "Получение списка событий подписчиком с параметрами",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код ответа 200 и тело ответа\", function() {\r",
									"  pm.response.to.be.ok;\r",
									"  pm.response.to.be.withBody;\r",
									"  pm.response.to.be.json;  \r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/:userId/subscriptions/:subId/events?size=15&sortOption=EVENT_DATE",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"subscriptions",
								":subId",
								"events"
							],
							"query": [
								{
									"key": "size",
									"value": "15"
								},
								{
									"key": "from",
									"value": null,
									"disabled": true
								},
								{
									"key": "onlyUpcoming",
									"value": null,
									"disabled": true
								},
								{
									"key": "sortOption",
									"value": "EVENT_DATE"
								}
							],
							"variable": [
								{
									"key": "userId",
									"value": "1"
								},
								{
									"key": "subId",
									"value": "3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение списка событий со всеми параметрами",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код ответа 200 и тело ответа\", function() {\r",
									"  pm.response.to.be.success;\r",
									"  pm.response.to.be.withBody;\r",
									"  pm.response.to.be.json;  \r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/:userId/subscriptions/:subId/events?sortOption=VIEWS&onlyUpcoming=true&from=0&size=15",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"subscriptions",
								":subId",
								"events"
							],
							"query": [
								{
									"key": "sortOption",
									"value": "VIEWS"
								},
								{
									"key": "onlyUpcoming",
									"value": "true"
								},
								{
									"key": "from",
									"value": "0"
								},
								{
									"key": "size",
									"value": "15"
								}
							],
							"variable": [
								{
									"key": "userId",
									"value": "1"
								},
								{
									"key": "subId",
									"value": "3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Успешная отмена подписки",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код ответа 204 и тело ответа\", function() {\r",
									"  pm.response.to.have.status(204); \r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/:userId/subscriptions/:subId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"subscriptions",
								":subId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "2"
								},
								{
									"key": "subId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение пустого списка подписок",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const body = pm.response.json();\r",
									"\r",
									"pm.test(\"Ответ должен содержать код ответа 200 и тело ответа\", function() {\r",
									"  pm.response.to.be.ok;\r",
									"  pm.response.to.be.withBody;\r",
									"  pm.response.to.be.json;  \r",
									"});\r",
									"\r",
									"pm.test(\"Список подписок не должен содержать запись\", function(){\r",
									"    pm.expect(body).to.be.length(0);\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/:userId/subscriptions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"subscriptions"
							],
							"variable": [
								{
									"key": "userId",
									"value": "2"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "getting error",
			"item": [
				{
					"name": "Добавление подписки, когда пользователь для подписки не найден",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код ответа 404 и тело ответа\", function() {\r",
									"  pm.response.to.be.notFound;\r",
									"  pm.response.to.be.withBody;\r",
									"  pm.response.to.be.json;  \r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/:userId/subscriptions/:subId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"subscriptions",
								":subId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "1"
								},
								{
									"key": "subId",
									"value": "800"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавление подписки, когда подписчик не найден",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код ответа 404 и тело ответа\", function() {\r",
									"  pm.response.to.be.notFound;\r",
									"  pm.response.to.be.withBody;\r",
									"  pm.response.to.be.json;  \r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/:userId/subscriptions/:subId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"subscriptions",
								":subId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "-3"
								},
								{
									"key": "subId",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавление подписки на самого себя",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код ответа 409 и тело ответа\", function() {\r",
									"  pm.response.to.have.status(409);\r",
									"  pm.response.to.be.withBody;\r",
									"  pm.response.to.be.json;  \r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/:userId/subscriptions/:subId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"subscriptions",
								":subId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "1"
								},
								{
									"key": "subId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавление повторной подписки",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код ответа 409 и тело ответа\", function() {\r",
									"  pm.response.to.have.status(409);\r",
									"  pm.response.to.be.withBody;\r",
									"  pm.response.to.be.json;  \r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/:userId/subscriptions/:subId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"subscriptions",
								":subId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "1"
								},
								{
									"key": "subId",
									"value": "3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение списка подписок, когда пользователь не найден",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код ответа 404 и тело ответа\", function() {\r",
									"  pm.response.to.be.notFound;\r",
									"  pm.response.to.be.withBody;\r",
									"  pm.response.to.be.json;  \r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/:userId/subscriptions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"subscriptions"
							],
							"variable": [
								{
									"key": "userId",
									"value": "2000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение списка подписчиков, когда пользователь не найден",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код ответа 404 и тело ответа\", function() {\r",
									"  pm.response.to.be.notFound;\r",
									"  pm.response.to.be.withBody;\r",
									"  pm.response.to.be.json;  \r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/:userId/subscriptions/subscribers",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"subscriptions",
								"subscribers"
							],
							"variable": [
								{
									"key": "userId",
									"value": "250"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение списка событий, когда подписка не найдена",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код ответа 404 и тело ответа\", function() {\r",
									"  pm.response.to.be.notFound;\r",
									"  pm.response.to.be.withBody;\r",
									"  pm.response.to.be.json;  \r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/:userId/subscriptions/:subId/events",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"subscriptions",
								":subId",
								"events"
							],
							"variable": [
								{
									"key": "userId",
									"value": "1"
								},
								{
									"key": "subId",
									"value": "4"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение списка событий, когда юзер не найден",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код ответа 404 и тело ответа\", function() {\r",
									"  pm.response.to.be.notFound;\r",
									"  pm.response.to.be.withBody;\r",
									"  pm.response.to.be.json;  \r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/:userId/subscriptions/:subId/events",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"subscriptions",
								":subId",
								"events"
							],
							"variable": [
								{
									"key": "userId",
									"value": "1"
								},
								{
									"key": "subId",
									"value": "700"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение списка событий с некорректными параметрами",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код ответа 400 и тело ответа\", function() {\r",
									"  pm.response.to.be.badRequest;\r",
									"  pm.response.to.be.withBody;\r",
									"  pm.response.to.be.json;  \r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/:userId/subscriptions/:subId/events?sortOption=qrnglj&onlyUpcoming=true&from=0&size=15",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"subscriptions",
								":subId",
								"events"
							],
							"query": [
								{
									"key": "sortOption",
									"value": "qrnglj"
								},
								{
									"key": "onlyUpcoming",
									"value": "true"
								},
								{
									"key": "from",
									"value": "0"
								},
								{
									"key": "size",
									"value": "15"
								}
							],
							"variable": [
								{
									"key": "userId",
									"value": "1"
								},
								{
									"key": "subId",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Отмена подписки, когда подписка не найдена",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код ответа 404 и тело ответа\", function() {\r",
									"  pm.response.to.be.notFound;\r",
									"  pm.response.to.be.withBody;\r",
									"  pm.response.to.be.json;  \r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/:userId/subscriptions/:subId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"subscriptions",
								":subId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "1"
								},
								{
									"key": "subId",
									"value": "7"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Повторная отмена подписки",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код ответа 404 и тело ответа\", function() {\r",
									"  pm.response.to.be.notFound;\r",
									"  pm.response.to.be.withBody;\r",
									"  pm.response.to.be.json;  \r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/:userId/subscriptions/:subId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"subscriptions",
								":subId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "2"
								},
								{
									"key": "subId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080"
		}
	]
}